class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        #WRONGLY TRIED TO COMBINE ITERATIVE WITH RECURSIVE
        # def dfs(tup,k): # have to send variable tup
        #     i,j = tup[0],tup[1] # have to unpack
        #     if k == len(word):
        #         return True
        #     stack = [(i,j)]
        #     while stack:
        #         curr_r, curr_c = stack.pop() #forgot this step
        #         for nr,nc in [[curr_r+1,curr_c],[curr_r-1,curr_c],[curr_r,curr_c+1],[curr_r,curr_c-1]]:
        #             if 0 <= nr < len(board) and 0<=nc < len(board[0]):
        #                 if board[nr][nc] == word[k]:
        #                     return dfs((nr,nc),k+1)
        def dfs(tup,k): # have to send variable tup
            ret = False
            if k == len(word):
                return True
            curr_r, curr_c  = tup[0],tup[1] #have to unpack
            visited.add((curr_r,curr_c))  #forgot that i need to keep track so we dont go in trivial loop
            for nr,nc in [[curr_r+1,curr_c],[curr_r-1,curr_c],[curr_r,curr_c+1],[curr_r,curr_c-1]]:
                if 0 <= nr < len(board) and 0<=nc < len(board[0]):
                    if board[nr][nc] == word[k] and (nr,nc) not in visited:
                        #return dfs((nr,nc),k+1) WRONG THIS MAKES IT SO WE DONT visited.remove()
                        ret = dfs((nr,nc),k+1)
                        if ret: break
            visited.remove((curr_r,curr_c)) 
            return ret
        
        visited = set()
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0]:
                    ret = dfs((i,j),1)
                    if ret:
                        return ret
        return False
