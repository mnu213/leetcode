class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        if not len(intervals):
            return [newInterval]
        res = []
        prev_interval  = newInterval
        if newInterval[1] < intervals[0][0]:
            return [newInterval] +intervals
        if newInterval[0] > intervals[-1][1]:
            intervals.append(newInterval)
            return intervals
        justInserted = False
        for i in range(len(intervals)):
            curr_interval = intervals[i]
            if self.overlaps(prev_interval,curr_interval):
                toInsert = []
                toInsert.append(min(prev_interval[0],intervals[i][0]))
                toInsert.append(max(prev_interval[1],intervals[i][1]))
                # if prev_interval != newInterval: #have to pop one of the pre-combined intervals
                #     if res: res.pop()
                if justInserted:
                    res.pop()
                justInserted= True
                res.append(toInsert)
                prev_interval = res[-1]
                
            else:
                res.append(intervals[i])
            if intervals[i][1] < newInterval[0] <= newInterval[1] < intervals[i+1][0]:
                res.append(newInterval)
        return res
    
    def overlaps(self, a, b):
        overlaps = False
        if b[0] <= a[0] <= b[1]:
            overlaps = True
        if b[0] <= a[1] <= b[1]:
            overlaps = True
        if a[0] <= b[0] <= a[1]:
            overlaps = True
        if a[0] <= b[1] <= a[1]:
            overlaps = True
        return overlaps

            
